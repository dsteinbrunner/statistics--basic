=head1 NAME

Statistics::Basic::StdDev - find the standard deviation of an array

=head1 SYNOPSIS

Invoke it this way:

    my $stddev = stddev(1,2,3);

Or this way:

    my $v1  = vector(1,2,3);
    my $std = stddev($v1);

And then either query the values or print them like so:

    print "The stddev of $v1: $std\n";
    my $sq = $std->query;
    my $s0 = 0+$std;

Create a 20 point "moving" stddev like so:

    my $sth = $dbh->prepare("select col1 from data where something");
    my $len = 20;
    my $std = stddev();
       $std->set_size($len);

    $sth->execute or die $dbh->errstr;
    $sth->bind_columns( my $val ) or die $dbh->errstr;

    my $count = $len;
    while( $sth->fetch ) {

        $std->insert( $val );
        if( -- $count <= 0 ) {
            print "StdDev: $std\n";
        }
    }

=head1 METHODS

=over 4

=item B<new>

The constructor takes a list of values, a single array ref, or a
single L<Statistics::Basic::Vector> as arguments.  It returns a
L<Statistics::Basic::StdDev> object.

Note: normally you'd use the L<mean()|Statistics::Basic/stddev()> constructor,
rather than building these by hand using C<new()>.

=item B<query_mean()>

Returns the L<Statistics::Basic::Mean> object used in the standard deviation
computation.

=item B<_OVB::import()>

This module also inherits all the overloads and methods from
L<Statistics::Basic::_OneVectorBase>.

=back

=head1 AUTHOR

Paul Miller C<< <jettero@cpan.org> >>

I am using this software in my own projects...  If you find bugs, please
please please let me know. :) Actually, let me know if you find it handy at
all.  Half the fun of releasing this stuff is knowing that people use it.

=head1 COPYRIGHT

Copyright 2009 Paul Miller -- Licensed under the LGPL

=head1 SEE ALSO

perl(1), L<Statistics::Basic>, L<Statistics::Basic::_OneVectorBase>

=cut
