=head1 NAME

Statistics::Basic::Vector - a class for handling arrays of numbers

=head1 SYNOPSIS

Invoke it this way:

    my $vector      = vector(1,2,3);
    my $same_vector = vector($vector);
    my $different   = $vector->copy;

This module tracks which of the other L<Statistics::Basic> modules I<use> it.
That's it's primary purpose.  Although, it does also have overloads to print the
vectors in a pretty fashion.

    print "$vector\n"; # pretty printed

=head1 METHODS

=over 4

=item C<new()>

The constructor takes a single array ref or a single
L<Statistics::Basic::Vector> as its argument.  It returns a
L<Statistics::Basic::Vector> object.

If given a vector object argument, this function will return the argument rather
than creating a new vector.

A vector's max size is set to the size of the argument on initialization.

Note: normally you'd use the L<vector()|Statistics::Basic/vector()> constructor,
rather than building these by hand using C<new()>.

=item C<copy()>

Creates a new vector object with the same contents and size as this one and returns it.

=item C<insert()>

Insert new values into the vector.  If the vector was already full (see
L</set_size()>), this will also shift oldest elements from the vector to
compensate.

    $vector->insert( 4, 3 ); # insert a 3 and a 4

=item C<append()> C<ginsert()>

Insert new values into the vector.  If the vector was already full (see
L</set_size()>), these functions will grow the size of the vector to accommodate
the new values, rather than shifting things.

    $vector->append( 4, 3 ); # append a 3 and a 4

=item C<query()>

C<query()> returns the contents of the vector either as a list or as an
arrayref.

    my @copy_of_contents      = $vector->query;
    my $reference_to_contents = $vector->query;

The contents of C<$reference_to_contents> can be altered to alter the contents
of the vector object, but doing this may screw up the object consistency and
especially the calculations based on the object.  It's better to use
L<Statistics::Basic::ComputedVector>s if you need to change the contents in a
special way.

=item C<query_filled()>

Returns true when the vector is the same size as the max size set by
L</set_size()>.

=item C<query_size()>

Returns the current number of elements in the vector object (not the size set
with L</set_size()>).  This is almost never false unless you're using the
L<$ENV{NOFILL}|Statistics::Basic/$ENV{NOFILL}> setting.

=item C<set_size()>

Sets the max size of the input vector.  Note that on initialization with
L</new()> or with L<computed()|Statistics::Basic/computed()>, the input vector
size is called automatically.

    my $v1 = vector(1,2,3);
    my $c2 = computed($v1);
       $c2->set_size(7); # actually sets the size of $v1

=item C<set_vector()>

Given a vector or array ref, this will set the contents (and size) of the input
vector to match the argument.  If given a vector object argument, this will make
the two vectors match, while still remaining separate objects.

=back

=head1 AUTHOR

Paul Miller C<< <jettero@cpan.org> >>

=head1 COPYRIGHT

Copyright 2009 Paul Miller -- Licensed under the LGPL

=head1 SEE ALSO

perl(1), L<Statistics::Basic>

=cut
