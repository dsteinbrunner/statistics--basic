=head1 NAME

Statistics::Basic::Correlation - find the correlation between two arrays

=head1 SYNOPSIS

Invoke it this way:

    my $correlation = correlation( [1,2,3], [1,2,3] );

Or this way:

    my $v1  = vector(1,2,3);
    my $v2  = vector(1,2,3);
    my $cor = corr($v1,$v2);

And then either query the values or print them like so:

    print "The correlation between $v1 and $v2: $correlation\n";
    my $cq = $cor->query;
    my $c0 = 0+$correlation;

Create a 20 point "moving" correlation like so:

    my $sth = $dbh->prepare("select col1,col2 from data where something");
    my $len = 20;
    my $cor = corr();
       $cor->set_size($len);

    $sth->execute or die $dbh->errstr;
    $sth->bind_columns( my ($lhs, $rhs) ) or die $dbh->errstr;

    my $count = $len;
    while( $sth->fetch ) {

        $cor->insert( $lhs, $rhs );
        if( -- $count <= 0 ) {
            print "Correlation: $cor\n";
        }
    }

The full details are probably in the base module.  If you have questions, just
let me know.

=head1 METHODS

=over 4

=item B<new()>

Create a new L<Statistics::Basic::Correlation> object.  This function takes two
arguments -- which can either be arrayrefs or L<Statistics::Basic::Vector>
objects.  This function is called when the
L<correlation()|Statistics::Basic/correlation() cor() corr()> shortcut-function
is called.

=item B<insert()>

Insert two new new values into the vectors.

    $correlation_object->insert( 4, 3 );

=item B<ginsert()>

The growing insert inserts new elements, growing the max size of the vector to
accommodate the new elements (if necessary).

    $correlation_object->ginsert( 4, 3 );

=item B<query()>

Query the correlation.  This package is based on the idea of moving averages and
moving correlations.  If the intended size of the vectors -- that set by
L</set_size()> -- isn't yet met, this function will return the undefined value,
rather than the calculated correlation.

=item B<size()>

The current size of the vectors -- regardless of their max size as set by
L</set_size()>.

=item B<set_size()>

Set the maximum size for the underlying L<Statistics::Basic::Vector> objects.

=item B<set_vector()>

Set the vector objects used to calculate the correlation.  This function takes
two arguments -- which can either be arrayrefs or L<Statistics::Basic::Vector>
objects.

=item B<query_covariance()>

Returns the L<Statistics::Basic::Covariance> object used to calculate the correlation.

=item B<query_vector1()>

Return the L<Statistics::Basic::Vector> for the first vector.

=item B<query_vector2()>

Return the L<Statistics::Basic::Vector> object for the second vector.

=item B<query_mean1()>

Returns the L<Statistics::Basic::Mean> object for the first vector.

=item B<query_mean2()>

Returns the L<Statistics::Basic::Mean> object for the second vector.

=back

=head1 OVERLOADS

This object is overloaded.  If evaluated as a string, it will attempt to print a
pretty value for the correlation (or C<n/a>, see L</query()> above).

If evaluated as a number, it will try to return the raw result of L</query()>,
possibly turning the resulting undef (if applicable) into a 0 in the process --
note that Perl does this 0-izing, not the overload.

The C<eq> and C<==> operators are also overloaded, trying to do the right thing.
Also see L<$ENV{TOLER}|Statistics::Basic/$ENV{TOLER}> for further information.

=head1 AUTHOR

Paul Miller C<< <jettero@cpan.org> >>

=head1 COPYRIGHT

Copyright 2009 Paul Miller -- Licensed under the LGPL

=head1 SEE ALSO

perl(1), L<Statistics::Basic>

=cut
