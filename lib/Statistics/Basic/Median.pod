=head1 NAME

Statistics::Basic::Median - find the median of an array

=head1 SYNOPSIS

Invoke it this way:

    my $median = median(1,2,3);

Or this way:

    my $v1  = vector(1,2,3);
    my $med = median($v1);

And then either query the values or print them like so:

    print "The median of $v1: $med\n";
    my $mq = $med->query;
    my $m0 = 0+$med;

Create a 20 point "moving" median like so:

    my $sth = $dbh->prepare("select col1 from data where something");
    my $len = 20;
    my $med = median();
       $std->set_size($len);

    $sth->execute or die $dbh->errstr;
    $sth->bind_columns( my $val ) or die $dbh->errstr;

    my $count = $len;
    while( $sth->fetch ) {

        $med->insert( $val );
        if( -- $count <= 0 ) {
            print "Median: $med\n";
        }
    }

=head1 METHODS

=over 4

=item B<new>

The constructor takes a list of values, a single array ref, or a
single L<Statistics::Basic::Vector> as arguments.  It returns a
L<Statistics::Basic::Median> object.

Note: normally you'd use the
L<median()|Statistics::Basic/median> constructor, rather than
building these by hand using C<new()>.

=item B<_OVB::import()>

This module also inherits all the overloads and methods from
L<Statistics::Basic::_OneVectorBase>.

=back

=head1 AUTHOR

Paul Miller C<< <jettero@cpan.org> >>

=head1 COPYRIGHT

Copyright 2009 Paul Miller -- Licensed under the LGPL

=head1 SEE ALSO

perl(1), L<Statistics::Basic>, L<Statistics::Basic::_OneVectorBase>

=cut
